"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.F122UDP = void 0;
const parsers_1 = require("./parsers/CarStatus/parsers");
const node_dgram_1 = require("node:dgram");
const node_stream_1 = require("node:stream");
const constants_1 = require("./constants");
const parsers_2 = require("./parsers/CarSetup/parsers");
const parsers_3 = require("./parsers/CarTelemetry/parsers");
const parsers_4 = require("./parsers/Event/parsers");
const parsers_5 = require("./parsers/LapData/parsers");
const parsers_6 = require("./parsers/Motion/parsers");
const parsers_7 = require("./parsers/Participants/parsers");
const parsers_8 = require("./parsers/Session/parsers");
const parsers_9 = require("./parsers/FinalClassification/parsers");
const parsers_10 = require("./parsers/lobby/parsers");
const parsers_11 = require("./parsers/CarDamage/parsers");
const parsers_12 = require("./parsers/SessionHistory/parsers");
const DEFAULT_PORT = 20777;
const ADDRESS = 'localhost';
class F122UDP extends node_stream_1.EventEmitter {
    constructor(options = {}) {
        super();
        const { port = DEFAULT_PORT, address = ADDRESS } = options;
        this.port = port;
        this.address = address;
        this.socket = (0, node_dgram_1.createSocket)('udp4');
    }
    // create socket
    start() {
        // if socket is not created, create it
        if (!this.socket) {
            this.socket = (0, node_dgram_1.createSocket)('udp4');
        }
        this.socket.bind({ port: this.port, address: this.address });
        this.socket.on('listening', () => {
            this.socket.on('message', (msg, rinfo) => {
                switch (rinfo.size) {
                    case constants_1.packetSize.Motion: {
                        const { data } = new parsers_6.PacketMotionDataParser(msg);
                        this.emit('motion', data);
                        break;
                    }
                    case constants_1.packetSize.Session:
                        {
                            const { data } = new parsers_8.PacketSessionDataParser(msg);
                            this.emit('session', data);
                        }
                        break;
                    case constants_1.packetSize.LapData: {
                        const { data } = new parsers_5.PacketLapDataParser(msg);
                        this.emit('lapData', data);
                        break;
                    }
                    case constants_1.packetSize.Event: {
                        const { data } = new parsers_4.PacketEventDataParser(msg);
                        this.emit('event', data);
                        break;
                    }
                    case constants_1.packetSize.Participants: {
                        const { data } = new parsers_7.PacketParticipantsParser(msg);
                        this.emit('participants', data);
                        break;
                    }
                    case constants_1.packetSize.CarSetups: {
                        const { data } = new parsers_2.PacketCarSetupDataParser(msg);
                        this.emit('carSetups', data);
                        // log packet size
                        break;
                    }
                    case constants_1.packetSize.CarTelemetry: {
                        const { data } = new parsers_3.PacketCarTelemetryDataParser(msg);
                        this.emit('carTelemetry', data);
                        break;
                    }
                    case constants_1.packetSize.CarStatus: {
                        const { data } = new parsers_1.PacketCarStatusDataParser(msg);
                        this.emit('carStatus', data);
                        break;
                    }
                    case constants_1.packetSize.FinalClassification: {
                        const { data } = new parsers_9.PacketFinalClassificationDataParser(msg);
                        this.emit('finalClassification', data);
                        break;
                    }
                    case constants_1.packetSize.LobbyInfo:
                        {
                            const { data } = new parsers_10.PacketLobbyInfoDataParser(msg);
                            this.emit('lobbyInfo', data);
                        }
                        break;
                    case constants_1.packetSize.CarDamage:
                        {
                            const { data } = new parsers_11.PacketCarDamageDataParser(msg);
                            this.emit('carDamage', data);
                            //12685950950652358499n
                        }
                        break;
                    case constants_1.packetSize.SessionHistory:
                        {
                            const { data } = new parsers_12.PacketSessionHistoryDataParser(msg);
                            this.emit('sessionHistory', data);
                        }
                        break;
                    default:
                        break;
                }
            });
        });
    }
    stop() {
        this.socket.close();
        // process.exit(0);
    }
}
exports.F122UDP = F122UDP;
//# sourceMappingURL=F1_22_UDP.js.map