/// <reference types="node" />
import { EventEmitter } from 'node:stream';
import { PacketMotionData } from './parsers/Motion/types';
import { PacketSessionData } from './parsers/Session/types';
import { PacketLapData } from './parsers/LapData/types';
import { PacketCarDamageData } from './parsers/CarDamage/types';
import { PacketCarSetupData } from './parsers/CarSetup/types';
import { PacketCarStatusData } from './parsers/CarStatus/types';
import { PacketCarTelemetryData } from './parsers/CarTelemetry/types';
import { PacketEventData } from './parsers/Event/types';
import { PacketFinalClassificationData } from './parsers/FinalClassification/types';
import { PacketLobbyInfoData } from './parsers/lobby/types';
import { PacketParticipantsData } from './parsers/Participants/types';
import { PacketSessionHistoryData } from './parsers/SessionHistory/types';
export { PacketMotionData, PacketSessionData, PacketLapData, PacketCarDamageData, PacketCarSetupData, PacketCarStatusData, PacketCarTelemetryData, PacketEventData, PacketFinalClassificationData, PacketLobbyInfoData, PacketParticipantsData, PacketSessionHistoryData };
interface Options {
    port?: number;
    address?: string;
}
export declare interface F122UDP {
    /**
    @event `"motion"`
    @description `Frequency: Rate as specified in menus Size: 1464 bytes`
     ```ts
      client.on('motion', data => {
      const motion:PacketMotionData = data
      })
      ```
    */
    on(event: 'motion', listener: (data: PacketMotionData) => void): this;
    /**
    @event "session"
    @description `Frequency: 2 per second; Size: 632 bytes;`
     ```ts
      client.on('session', data => {
      const session:PacketSessionData = data
      })
      ```
    */
    on(event: 'session', listener: (data: PacketSessionData) => void): this;
    /**
    @event "lapData"
    @description `Frequency: Rate as specified in menus Size: 972 bytes`
     ```ts
      client.on('lapData', data => {
      const LapData:PacketLapData = data
      })
      ```
    */
    on(event: 'lapData', listener: (data: PacketLapData) => void): this;
    /**
    @event "event"
    @description `Frequency: When the event occurs; Size: 40 bytes;`
     ```ts
      client.on('event', data => {
      const event:PacketEventData = data
      })
      ```
    */
    on(event: 'event', listener: (data: PacketEventData) => void): this;
    /**
    @event "participants"
    @description  `Frequency: Every 5 seconds Size: 1257 bytes`
     ```ts
      client.on('participants', data => {
      const participants:PacketParticipantsData = data
      })
      ```
    */
    on(event: 'participants', listener: (data: PacketParticipantsData) => void): this;
    /**
    @event "carSetups"
    @description `Frequency: 2 per second Size: 1102 bytes`
     ```ts
      client.on('carSetups', data => {
      const carSetups:PacketCarSetupData = data
      })
      ```
    */
    on(event: 'carSetups', listener: (data: PacketCarSetupData) => void): this;
    /**
    @event "carTelemetry"
    @description `Frequency: Rate as specified in menus Size: 1347 bytes`
     ```ts
      client.on('carTelemetry', data => {
      const carTelemetry:PacketCarTelemetryData = data
      })
      ```
    */
    on(event: 'carTelemetry', listener: (data: PacketCarTelemetryData) => void): this;
    /**
    @event "carStatus"
    @description `Frequency: Rate as specified in menus Size: 1058 bytes`
     ```ts
      client.on('carStatus', data => {
      const carStatus:PacketCarStatusData = data
      })
      ```
    */
    on(event: 'carStatus', listener: (data: PacketCarStatusData) => void): this;
    /**
    @event "lobbyInfo"
    @description `Frequency: Two every second when in the lobby Size: 1191 bytes`
     ```ts
      client.on('lobbyInfo', data => {
      const lobbyInfo:PacketLobbyInfoData = data
      })
      ```
    */
    on(event: 'lobbyInfo', listener: (data: PacketLobbyInfoData) => void): this;
    /**
    @event "finalClassification"
    @description `Frequency: Once at the end of a race Size: 1015 bytes`
     ```ts
      client.on('finalClassification', data => {
      const finalClassification:PacketFinalClassificationData = data
      })
      ```
    */
    on(event: 'finalClassification', listener: (data: PacketFinalClassificationData) => void): this;
    /**
    @event "carDamage"
    @description `Frequency: 2 per second Size: 948 bytes`
     ```ts
      client.on('carDamage', data => {
      const carDamage:PacketCarDamageData = data
      })
      ```
    */
    on(event: 'carDamage', listener: (data: PacketCarDamageData) => void): this;
    /**
    @event "sessionHistory"
    @description `Frequency: 20 per second but cycling through cars Size: 1155 bytes`
     ```ts
      client.on('sessionHistory', data => {
      const sessionHistory:PacketSessionHistoryData = data
      })
      ```
    */
    on(event: 'sessionHistory', listener: (data: PacketSessionHistoryData) => void): this;
}
export declare class F122UDP extends EventEmitter {
    private socket;
    port: number;
    address: string;
    constructor(options?: Options);
    start(): void;
    stop(): void;
}
